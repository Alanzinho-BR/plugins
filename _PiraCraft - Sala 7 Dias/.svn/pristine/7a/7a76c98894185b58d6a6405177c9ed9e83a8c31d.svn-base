package com.hcp;

import java.io.File;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.OfflinePlayer;
import org.bukkit.WorldBorder;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.plugin.Plugin;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitRunnable;

import com.hcp.api.Admin;
import com.hcp.cmd.Teste;
import com.hcp.cmd.Utils;
import com.hcp.daays.Days;
import com.hcp.daays.Difficulty;
import com.hcp.mercado.API;
import com.hcp.mercado.Bau;
import com.hcp.mercado.Carregar;
import com.hcp.mercado.Entradas;

import br.com.piracraft.api.PiraCraftAPI;
import br.com.piracraft.api.caixas.ItemAPI;

public class Main extends JavaPlugin {

	public static Plugin plugin;

	public static List<Schemas> schematic = new ArrayList<Schemas>();

	public static boolean b = true;
	public static String inicialDate = null;
	public static String finalDate = null;

	public static boolean iniciado = false;
	public static boolean rain = false;

	public static Map<String, Location> locations = new HashMap<String, Location>();

	@Override
	public void onLoad() {
		Bukkit.getServer().unloadWorld("world", false);
		removerArquivos(new File("world"));
	}

	public void removerArquivos(File f) {
		if (f.isDirectory()) {
			File[] files = f.listFiles();
			for (File file : files) {
				file.delete();
			}
		}
	}

	@SuppressWarnings("deprecation")
	public void onEnable() {
		plugin = this;

		Bukkit.getWorld("world").setAutoSave(false);

		Bukkit.getPluginManager().registerEvents(new Eventos(), this);
		Bukkit.getPluginManager().registerEvents(new Admin(), this);
		Bukkit.getPluginManager().registerEvents(new Bau(), this);

		Bukkit.getWorld("world").setDifficulty(org.bukkit.Difficulty.HARD);
		
		Admin.isUsingAdmin();

		getCommand("start").setExecutor(new Teste());
		getCommand("test").setExecutor(new Teste());
		getCommand("caixa").setExecutor(new Teste());
		getCommand("chuva").setExecutor(new Teste());

		getCommand("cc").setExecutor(new Utils());
		getCommand("hardcore").setExecutor(new Utils());

		getServer().getMessenger().registerOutgoingPluginChannel(this, "BungeeCord");

		String s = new SimpleDateFormat("HH").format(new Date());
		String s1 = new SimpleDateFormat("mm").format(new Date());
		System.out.println("Hora " + s + ":" + s1);

		try {
			ResultSet a = br.com.piracraft.api.Main.getMysql().conectar().createStatement().executeQuery(
					"SELECT * FROM MINIGAMES_SALAS_E_SERVIDORES WHERE PORTA = '" + Bukkit.getPort() + "';");
			if (a.next()) {
				inicialDate = a.getString("DT_INICIAL");
				finalDate = a.getString("DT_FINAL");
			}
			a.getStatement().getConnection().close();
		} catch (SQLException e) {
			System.out.println("ERRO - Main: " + e.getCause());
		}

		Date d = new Date();
		Date dd = null;
		try {
			dd = new SimpleDateFormat("yyyy-MM-dd").parse(inicialDate);
		} catch (ParseException e1) {
			e1.printStackTrace();
		}

		Calendar c = Calendar.getInstance();
		c.setTime(d);

		Calendar c1 = Calendar.getInstance();
		c1.setTime(dd);

		System.out.println("Inicial - " + c1.get(Calendar.DAY_OF_MONTH));
		System.out.println("Hoje - " + c.get(Calendar.DAY_OF_MONTH));
		
		System.out.println("Data do sql: " + inicialDate);
		System.out.println("Data cortada do sql: " + com.hcp.Main.inicialDate.substring(11, 19));

		Days.days = (int) (c.get(Calendar.DAY_OF_MONTH) - c1.get(Calendar.DAY_OF_MONTH))+1;

		new BukkitRunnable() {
			public void run() {
				if (!rain) {
					Bukkit.getWorld("world").setStorm(false);
				}
			}
		}.runTaskTimer(this, 0, 20);

		new BukkitRunnable() {

			@Override
			public void run() {
				for (Player s : Bukkit.getOnlinePlayers()) {

					if (locations.containsKey(s.getName())) {
						if (locations.get(s.getName()).equals(s.getLocation())) {
							if (br.com.piracraft.api.Main.network.get(s) == 1) {
								s.sendMessage("§4§lHardcore§f§l» §eVoce passou muito tempo sem se mexer.");
								Eventos.enviar(s, "lobbyhardcore");
							} else {
								s.sendMessage("§4§lHardcore§f§l» §eYou didn't moved for a long time.");
								Eventos.enviar(s, "lobbyhardcore");
							}
						} else {
							locations.put(s.getName(), s.getLocation());
						}
					} else {
						locations.put(s.getName(), s.getLocation());
					}
				}
			}
		}.runTaskTimer(this, 0, 20 * 180);

		new BukkitRunnable() {
			public void run() {
				if(iniciado){
					String as = new SimpleDateFormat("HH:mm").format(new Date());
					for (Player s : Bukkit.getOnlinePlayers()) {
						if (br.com.piracraft.api.Main.network.get(s) == 1) {

							SSB ss = new SSB("§6§lPira§f§lCraft");

							ss.add("§0 ", 7);
							ss.add("Coins: §b" + Eventos.coins.get(s), 6);
							ss.add("Cash: §b" + Eventos.cash.get(s), 5);
							ss.add("§3 ", 4);
							ss.add("Jogadores: §b" + Bukkit.getOnlinePlayers().size() + "/" + Bukkit.getMaxPlayers(), 3);
							ss.add("Relogio: §b" + as);
							ss.add("TimePlay §b" + new SimpleDateFormat("HH:mm:ss").format(Eventos.tempo.get(s)), 2);
							ss.add("Dia: §b" + Days.days, 1);
							ss.add("§4 ", 0);
							ss.add("§apiracraft.com.br", -1);

							ss.build();
							ss.send(s);
						} else {
							SSB ss = new SSB("§4§lU§6§lPlay§9§lCraft");

							ss.add("§0 ", 7);
							ss.add("Coins: §b" + Eventos.coins.get(s), 6);
							ss.add("Cash: §b" + Eventos.cash.get(s), 5);
							ss.add("§3 ", 4);
							ss.add("Players: §b" + Bukkit.getOnlinePlayers().size() + "/" + Bukkit.getMaxPlayers(), 3);
							ss.add("Clock: §b" + as);
							ss.add("TimePlay §b" + new SimpleDateFormat("HH:mm:ss").format(Eventos.tempo.get(s)), 2);
							ss.add("Day: §b" + Days.days, 1);
							ss.add("§4 ", 0);
							ss.add("§auplaycraft.com", -1);

							ss.build();
							ss.send(s);
						}
					}
				}
			}
		}.runTaskTimer(this, 0, 27 * 60);

		try {
			ResultSet rs = br.com.piracraft.api.Main.getMysql().conectar().createStatement()
					.executeQuery("SELECT * FROM V_LOJAMINECRAFT_BAUS ORDER BY `ID`");
			while (rs.next()) {
				boxItems.add(Material.getMaterial(rs.getInt("ID_ITEM")));
			}
			rs.getStatement().getConnection().close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		try {
			ResultSet rs = br.com.piracraft.api.Main.getMysql().conectar().createStatement().executeQuery(
					"SELECT * FROM MINIGAMES_SALAS_E_SERVIDORES WHERE PORTA = '" + Bukkit.getPort() + "'");
			if (rs.next()) {
				Days.ciclo = rs.getInt("7_DIAS_CICLO_DA_SALA");
				Days.minimo = rs.getInt("7_DIAS_TEMPO_MINIMO");
			}
			rs.getStatement().getConnection().close();
		} catch (SQLException e) {
			e.printStackTrace();
		}

		new BukkitRunnable() {
			public void run() {
				if (iniciado == false) {
					if (new SimpleDateFormat("HH:mm:ss").format(new Date()).equals(com.hcp.Main.inicialDate.substring(11, 19))) {
						cancel();
						iniciado=true;
						Days.startTheGame();
						Days.startCheck();

						System.out.println("------------------------");
						System.out.println("Dia - " + Days.days);
						System.out.println("Ciclo - " + Days.ciclo);
						System.out.println("Hora do checkWin - " + finalDate);
						System.out.println(" ");

						try {
							for (int x = 0; x < br.com.piracraft.api.Main.hard.size(); x++) {
								if (br.com.piracraft.api.Main.hard.get(x).getIdDias() == Days.days) {
									Difficulty.damage = br.com.piracraft.api.Main.hard.get(x).getIntensidade();
									Difficulty.creeperRange = br.com.piracraft.api.Main.hard.get(x).getRange();
								}
							}

							System.out.println("Dano - " + Difficulty.damage);
							System.out.println("CreeperRange - " + Difficulty.creeperRange);
							System.out.println("------------------------");
						} catch (NullPointerException e) {
							System.out.println("ERRO - " + e.getCause());
						}

						Bukkit.getConsoleSender().sendMessage("§aRelogio iniciado!");
						Bukkit.getConsoleSender()
								.sendMessage("§aHora - §6" + new SimpleDateFormat("HH:mm:ss").format(new Date()));
						
						if(Bukkit.getOnlinePlayers().size() >= 1){
							for(Player p : Bukkit.getOnlinePlayers()){

								Eventos.coins.put(p, 0);
								Eventos.cash.put(p, 0);

								Eventos.tempoEntrada.put(br.com.piracraft.api.Main.uuid.get(p), new Date());

								try {
									ResultSet rs = br.com.piracraft.api.Main.getMysql().conectar().createStatement()
											.executeQuery("SELECT * FROM 7_DIAS_INSCRICAO_SALA WHERE UUID = '" + br.com.piracraft.api.Main.uuid.get(p) + "'");
									if (rs.next()) {
										try {
											Eventos.tempo.put(rs.getString("UUID"),
													new SimpleDateFormat("HH:mm:ss").parse(rs.getString("TEMPO_CORRIDO")));
										} catch (ParseException e1) {
											e1.printStackTrace();
										}
									}
									rs.getStatement().getConnection().close();
								} catch (SQLException ee) {
									ee.printStackTrace();
								}

								p.teleport(Eventos.getRandomLocation().add(0, 20, 0));

								p.addPotionEffect(new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 400, 15));
								p.addPotionEffect(new PotionEffect(PotionEffectType.HEAL, 400, 15));

								p.sendMessage("§4§lHardcore§f§l» §eVoce esta invencivel por 20 segundos.");
								p.setFireTicks(0);

								String as = new SimpleDateFormat("HH:mm").format(new Date());
								for (Player s : Bukkit.getOnlinePlayers()) {
									if (br.com.piracraft.api.Main.network.get(s) == 1) {

										SSB ss = new SSB("§6§lPira§f§lCraft");

										ss.add("§0 ", 7);
										ss.add("Coins: §b" + Eventos.coins.get(s), 6);
										ss.add("Cash: §b" + Eventos.cash.get(s), 5);
										ss.add("§3 ", 4);
										ss.add("Jogadores: §b" + Bukkit.getOnlinePlayers().size() + "/" + Bukkit.getMaxPlayers(), 3);
										ss.add("Relogio: §b" + as, 2);
										ss.add("Dia: §b" + Days.days, 0);
										ss.add("§4 ", -1);
										ss.add("§apiracraft.com.br", -2);

										ss.build();
										ss.send(s);
									} else {
										SSB ss = new SSB("§4§lU§6§lPlay§9§lCraft");

										ss.add("§0 ", 7);
										ss.add("Coins: §b" + Eventos.coins.get(s), 6);
										ss.add("Cash: §b" + Eventos.cash.get(s), 5);
										ss.add("§3 ", 4);
										ss.add("Players: §b" + Bukkit.getOnlinePlayers().size() + "/" + Bukkit.getMaxPlayers(), 3);
										ss.add("Clock: §b" + as, 2);
										ss.add("Day: §b" + Days.days, 0);
										ss.add("§4 ", -1);
										ss.add("§auplaycraft.com", -2);

										ss.build();
										ss.send(s);
									}
								}

								p.getWorld().setDifficulty(org.bukkit.Difficulty.HARD);
								p.getInventory().setItem(8, ItemAPI.Criar(Material.ENDER_CHEST, 1, 0, "§cMeus itens", true));
								p.setGameMode(GameMode.SURVIVAL);
							}
						}
					}
				} else {
					cancel();
				}
			}
		}.runTaskTimer(this, 0, 5);

		new BukkitRunnable() {
			public void run() {
				Entradas.whitelist = new ArrayList<Entradas>();
				Bukkit.getConsoleSender().sendMessage("§6Jogadores que compraram reviver nos ultimos 5 minutos:");

				try {
					ResultSet rs = br.com.piracraft.api.Main.getMysql().conectar().createStatement().executeQuery(
							"SELECT * FROM V_7_DIAS_USUARIOS_LIBERADOS WHERE ACESSO_BLOQUEADO = 0 ORDER BY `ID_SALA`");
					while (rs.next()) {
						Entradas e = new Entradas();

						e.setUuid(rs.getString("UUID"));

						Entradas.whitelist.add(e);
					}
					rs.getStatement().getConnection().close();
				} catch (SQLException e) {
					e.printStackTrace();
				}

				try {
					ResultSet rs = br.com.piracraft.api.Main.getMysql().conectar().createStatement()
							.executeQuery("SELECT * FROM USUARIO ORDER BY `ID`");
					while (rs.next()) {
						for (int x = 0; x < Entradas.whitelist.size(); x++) {
							if (Entradas.whitelist.get(x).getUuid().equalsIgnoreCase(rs.getString("UUID"))) {
								OfflinePlayer op = Bukkit.getOfflinePlayer(rs.getString("NICK_NAME"));
								if (op.isBanned()) {
									op.setBanned(false);
									Bukkit.getConsoleSender().sendMessage("§a" + op.getName());
								}
							}
						}
					}
					rs.getStatement().getConnection().close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}.runTaskTimer(this, 0, 20 * 300);

		new BukkitRunnable() {
			public void run() {
				try {
					ResultSet rs = br.com.piracraft.api.Main.getMysql().conectar().createStatement().executeQuery(
							"SELECT SALA_REFRESH FROM MINIGAMES_SALAS_E_SERVIDORES WHERE SALA_REFRESH = 2");
					if (rs.next()) {
						br.com.piracraft.api.Main.getMysql().execute(
								"UPDATE MINIGAMES_SALAS_E_SERVIDORES SET SALA_REFRESH = 1");

						Entradas.whitelist = new ArrayList<Entradas>();
						Bukkit.getConsoleSender()
								.sendMessage("§6Jogadores que compraram reviver nos ultimos 5 minutos:");

						try {
							ResultSet r = br.com.piracraft.api.Main.getMysql().conectar().createStatement()
									.executeQuery(
											"SELECT * FROM V_7_DIAS_USUARIOS_LIBERADOS WHERE ACESSO_BLOQUEADO = 0 ORDER BY `ID_SALA`");
							while (r.next()) {
								Entradas e = new Entradas();

								e.setUuid(r.getString("UUID"));

								Entradas.whitelist.add(e);
							}
							r.getStatement().getConnection().close();
						} catch (SQLException e) {
							e.printStackTrace();
						}

						try {
							ResultSet r = br.com.piracraft.api.Main.getMysql().conectar().createStatement()
									.executeQuery("SELECT * FROM USUARIO ORDER BY `ID`");
							while (r.next()) {
								for (int x = 0; x < Entradas.whitelist.size(); x++) {
									if (Entradas.whitelist.get(x).getUuid().equalsIgnoreCase(r.getString("UUID"))) {
										OfflinePlayer op = Bukkit.getOfflinePlayer(r.getString("NICK_NAME"));
										if (op.isBanned()) {
											op.setBanned(false);
											Bukkit.getConsoleSender().sendMessage("§a" + op.getName());
										}
									}
								}
							}
							r.getStatement().getConnection().close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
					rs.getStatement().getConnection().close();
				} catch (SQLException e) {
					e.printStackTrace();
				}
			}
		}.runTaskTimer(this, 0, 200);

		WorldBorder wb = Bukkit.getServer().getWorld("world").getWorldBorder();
		
		wb.setSize(1000);
		wb.setCenter(0, 0);
		wb.setDamageAmount(2.0);
	}

	public static List<Material> boxItems = new ArrayList<Material>();
}
